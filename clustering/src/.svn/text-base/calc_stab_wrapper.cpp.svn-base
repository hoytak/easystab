#include "calc_stab.hpp"

#include <R_ext/Rdynload.h>
#include <Rdefines.h>
#include <stdio.h>

extern "C" SEXP _sorted_stability_matrix(SEXP dest_, SEXP index_map_, SEXP K_map_, SEXP X_, SEXP labels_,SEXP n_, SEXP K_, SEXP beta_, SEXP Kmap_mode_){
  double * dest = REAL(dest_);
  int * index_map = INTEGER(index_map_);
  int * K_map = INTEGER(K_map_);
  double * X = REAL(X_);
  int * labels = INTEGER(labels_);
  int n = INTEGER(n_)[0];
  int K = INTEGER(K_)[0];
  double beta = REAL(beta_)[0];
  int Kmap_mode = INTEGER(Kmap_mode_)[0];

  // R array start with index 1, c++ starts with 0
  for(int i=0; i<n; i++)
    labels[i] --;

  sorted_stability_matrix(dest, index_map, K_map, X, labels, n, K, beta, Kmap_mode);


  for(int i=0; i<n; i++){
    labels[i] ++;
    index_map[i] ++;
  }

  SEXP retval;
  PROTECT(retval = NEW_INTEGER(1));
  INTEGER(retval)[0] = 0;
  UNPROTECT(1);

  return retval;
}

extern "C" SEXP _score(SEXP dist_, SEXP n_, SEXP K_, SEXP seed_,
		       SEXP n_baselines_, SEXP beta_, SEXP use_permutations_, SEXP by_dimension_){
  double * dist = REAL(dist_);
  int n = INTEGER(n_)[0];
  int K = INTEGER(K_)[0];
  int seed = INTEGER(seed_)[0];
  int n_baselines = INTEGER(n_baselines_)[0];
  double beta = REAL(beta_)[0];
  bool use_permutations = LOGICAL(use_permutations_)[0] != 0;
  bool by_dimension = LOGICAL(by_dimension_)[0] != 0;
  
  SEXP retval;

  double res = score(dist, n, K, seed, n_baselines, beta, use_permutations, by_dimension);

  PROTECT(retval = NEW_NUMERIC(1));
  REAL(retval)[0] = res;
  UNPROTECT(1);

  return retval;
}

extern "C" SEXP _calculateScores(SEXP scores_, SEXP src_, SEXP n_, SEXP K_, SEXP seed_, SEXP n_baselines_,
				 SEXP beta_, SEXP use_permutations_, SEXP by_dimension_){
  double* scores = REAL(scores_);
  double* src = REAL(src_);
  size_t n = INTEGER(n_)[0];
  size_t K = INTEGER(K_)[0];
  size_t seed = INTEGER(seed_)[0];
  size_t n_baselines = INTEGER(n_baselines_)[0];
  double beta = REAL(beta_)[0];
  bool use_permutations = LOGICAL(use_permutations_)[0] != 0;
  bool by_dimension = LOGICAL(by_dimension_)[0] != 0;

  calculateScores(scores, src, n, K, seed, n_baselines, beta, use_permutations, by_dimension);

  SEXP retval;
  PROTECT(retval = NEW_INTEGER(1));
  INTEGER(retval)[0] = 0;
  UNPROTECT(1);

  return retval;

}
